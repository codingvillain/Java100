public class Array {

    public static void main(String[] args){

    /*
    1. 배열의 용도와 배열을 선언하는 방법에 대해서 작성해보시오.
       아래 코드에서 배열의 생성이 틀린 것을 찾아보시오.
       이 문제는 배열의 개념과 역할 그리고 배열을 사용하기 위해 선언하는 방법에 대해서 아는지를 묻는 문제이다.
    * */
    int[] sales_table = new int[100];
    int sales_table2[] = new int[100];
    int[] sales_table3;
    sales_table3 = new int[100];


    /*
    배열이란?
    - 자동차 판매 회사에서 영업사원의 판매 실적을 저장한다고 할 때 배열이 없으면 변수를 사용하여 저장할 것이다.
    - 영업사원이 10명 정도라면 모르겠지만, 100명이 넘는다면 변수를 일일이 선언하고 영업사원의 판매실적을 저장하는 것이 상당히 번거롭다.
    - 그러나 배열을 이용하면 일일이 변수를 선언할 필요없이 한방에 선언이 되고, 초기화 값도 한방에 셋팅해준다.
    - 즉, 배열은 동일한 데이터 파입의 값들을 하나의 배열명으로 저장시킬 수 있는 아주 편리한 자료구조이다.

    배열의 선언
    - 데이터타입[] 배열명 = new 데이터타입[배열크기];
    - 데이터타입 배열명[] = new 데이터타입[배열크기];

    배열의 선언 -> 배열의 크기 지정 -> 배열 공간의 값은 자동으로 초기화 세팅됨(정수형: 0, 실수형: 0.0)

    자동차 판매 회사의 영업사원 100명에 대한 영업실적을 저장하는 배열 선언 및 크기 지정 -> 2가지 방식
   * */
    // 첫번째 방식
    int[] sales_table4 = new int[100];

    // 두번째 방식
    double[] sales_table5;
    sales_table5 = new double[100];

    // 선언한 배열 사용하기
    System.out.println(sales_table4[0]);  // 0
    System.out.println(sales_table4[99]); // 0


    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*
    2. 배열과 인덱스의 관계에 대해서 설명하고 배열의 초깃값은 어떻게 셋팅되는지 말해보시오.
       크기 10의 정수형 배열을 생성하고 인덱스로 배열 공간의 값을 출력해보시오.
       이 문제는 자바의 배열 및 인덱스 사용법 그리고 배열 생성시 초깃값이 어떻게 정해지는지를 묻는 문제이다.

        // 아래 코드의 결과를 말해보시오
    * */
        // 배열의 선언 및 크기 지정 -> 학생 10명의 성적을 담는 배열
        int[] scores = new int[10];
        int s_size = scores.length;
        System.out.println(s_size); // 10

        // 선언한 배열을 인덱스로 접근하여 값 출력하기
        System.out.println(scores[0]); // 0
        System.out.println(scores[9]); // 0
     // System.out.println(scores[10]); // Err
        System.out.println(scores[s_size - 1]); // 0


        /*
        배열과 인덱스
        - 크기 10의 정수형 배열을 선언하고 크기 10을 지정하면 메모리상에는 10개의 정수형 값을 담을 수 있는 공간이 생성된다.
        - 배열 변수는 참조형 타입으로써 해당 메모리 공간을 가리키게 된다. -> 즉, 해당 메모리 공간의 주소 값을 가진다. -> 이 주소 값을 통해서 참조한다.
        - 주소 값을 참조 값이라고도 부른다.
        - 공간이 10개 만들어지면 동시에 자동적으로 해당 공간에 접근할 수 있는 인덱스 번호가 자동 부여된다. ->인덱스 번호는 0부터 시작.
        - 따라서, 크기가 10인 배열 공간의 첫 번째 인덱스는 0이고, 마지막 공간의 인덱스는 9가된다. 즉, '마지막 인덱스 - 1'이 된다.
        - 인덱스 사용 -> 배열명[인덱스 번호]
        * */

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*
    3. 배열 요소에 데이터 값을 넣으려면 어떻게 해야하는지 작성해보시오.
       이 문제는 배열을 생성한 후에 데이터 값을 입력하는 방법에 대해서 아는지를 묻는 문제이다.
        3
        11
        22
        33
        44
        44
    * */
        // 배열 선언
        int[] sales = new int[5];

        // 선언한 배열 공간에 값 입력하기
        sales[0] = 3;
        sales[1] = 11;
        sales[2] = 22;
        sales[3] = 33;
        sales[4] = 44;

        // 값 출력
        System.out.println(sales[0]); // 3
        System.out.println(sales[1]); // 11
        System.out.println(sales[2]); // 22
        System.out.println(sales[3]); // 33
        System.out.println(sales[4]); // 44
        System.out.println(sales[sales.length -1]); // 44

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        4. 크기 5의 정수형 배열을 선언하고 55, 88, 60, 100, 90으로 각 요소의 값을 초기화하시오.
            이 문제는 배열 선언과 동시에 특정 값으로 초기화 할 수 있는지를 묻는 문제이다.
            이때, 2가지 방식으로 초기화를 할 수 있는데 모두 작성해보시오.
        * */
        // [1]
        int[] sales4_1 = {55, 88, 60, 100, 90};
        System.out.println(sales4_1[1]); // 88

        // [2]
        int[] sales4_2 = new int[] {55, 88, 60, 100, 90};
        System.out.println(sales4_2[2]); // 60

        // [3]
        int[] sales4_3;
        sales4_3 = new int[]{55, 88, 60, 100, 90};
        System.out.println(sales4_3[3]); // 100

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        5. 배열 요소의 값을 반복문을 사용하여 모두 출력하시오.
            이 문제는 배열 원소의 값을 for문과 같은 반복문을 사용하여 출력할 수 있는지를 묻는 문제이다.
        * */
        // 배열 선언과 동시에 특정 값으로 초기화
        int[] sales5_1 = {33, 52, 93, 100, 87};

        // 반복문을 사용하여 모든 값 출력
        for(int i = 0; i < sales5_1.length; i++){
            System.out.print(sales5_1[i] + " ");
        }
        System.out.println();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        6. 크기 5의 정수형과 실수형 배열을 생성하고 각각의 주소 값을 출력해보시오.
            주소 값은 다른 말로 참조 값이라고도 한다.
            이 문제는 배열 변수에 들어있는 값이 참조형 타입인지에 대해서 알고 있는지를 묻는 문제이다.
        * */
        // 정수형과 실수형 배열 변수 선언
        int[] ar = {3, 3, 3, 3, 4};
        double[] ar2 = {9.8, 2.45, 5.98, 5.11, 3.14};

        // 마지막 배열 요소 값 출력
        System.out.println(ar[ar.length-1]); // 4
        System.out.println(ar2[ar2.length-1]); // 3.14

        // 배열명 자체를 찍어서 출력 -> 주소(참조) 값 -> I: 정수형 배열, D: 실수형 배열을 의미
        System.out.println(ar); // I
        System.out.println(ar2); // D

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        7. 배열의 값들을 for문과 같은 반복문을 사용하지 않고 한꺼번에 출력하는 코드를 작성하시오.
            이 문제는 반복문이 아닌 메서드로 배열의 요소 값들을 출력하는 방법에 대해서 아는지를 묻는 문제이다.

        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        2.
        * */


    }






}
