import com.sun.jdi.connect.Connector;

import javax.xml.transform.Result;
import java.security.PublicKey;
import java.util.Arrays;
import java.util.Locale;
import java.util.function.IntPredicate;

public class Method {

    /*
    1. 아래의 메서드 구현 코드에서 틀린 곳을 찾아 올바르게 수정하시오.
        이 문제는 자바의 메서드 구현시 기본적인 주의점에 대해서 아는지를 묻는 문제이다.
        클래스명.메서드명();
  * */
    public static void helloWorld(){  // 아래의 main 메서드 실행 전에 진행되므로 static 필수!
        System.out.println("Hello, World~");
    };
    public static void main(String[] args) { // static은 다른 static을 부른다.
        // [1] : 메서드 호출
        helloWorld();
    };

     //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*
    2. 메서드의 정의와 기본적인 자바의 메서드를 작성해보시오.
        이 문제는 자바의 메서드 개념과 메서드가 가지는 여러 특징들에 대해서 알고 있는지를 묻는 문제이다.

    // [1] : 메서드란
    - 메서드는 다른 언어에서의 함수와 마찬가지로 어떤 특정한 동작이나 처리를 하도록 만들어진 코드 단위이다.
    - 반복적인 작업을 처리해야 하는 경우 메서드로 만들어놓으면 이후에 필요할 때 다시 재사용할 수 있어서 아주 유용하다.
    - 메서드는 호출시 어떤 결과를 반환하기도 하지만, 결과를 반환하지 않는 메서드도 있다.
    - 메서드는 호출시 어떤 인자 값들을 넘겨서 호출하는 경우도 있고, 인자 값 없이 호출하는 경우도 있다.

    // [2] : 메서드 종류 -> 크게 4가지 유형
    - (1) 반환 값 x     받는 인자값 x
    - (2) 반환 값 x     받는 인자값 o
    - (3) 반환 값 o     받는 인자값 x
    - (4) 반환 값 o     받는 인자값 o
  * */

    // (1) 반환 값 x     받는 인자값 x
    public static void showMenu(){
        System.out.println("showMenu() 메서드가 호출되었습니다.");
    };
    public static void main(String[] args2){
        showMenu(); // showMenu() 메서드가 호출되었습니다. -> 위에 메서드를 여러 개 설정할 수 있지만 메서드 호출을 해주지 않는다면 출력되지 않는다. (주의!)
    }


    //(2) 반환 값 x     받는 인자값 o
    // 반환 값이 없고 받는 인자값이 2개 있는 덧셈 메서드를 구현하시오.
    // 이 문제는 자바의 메서드 작성법과 반환값, 인자값에 대한 이해가 있는지를 묻는 문제이다.
    public static void plusMethod(int a, int b){
        System.out.printf("인자로 넘겨받은 2개의 값은 %d, %d 이다.%n", a, b);
        int rst = a+b;
        System.out.printf("두 수를 더한 값은 = %d",rst);
    };

    public static void main(String[] args){

        //(2) 반환 값 x     받는 인자값 o
        // 메서드가 받는 인자값이 있다는 것은 호출부에서 파라미터 값을 넘긴다는 뜻.
        int a=100, b=200;
        plusMethod(a, b);
    };


    //(3) 반환 값 o     받는 인자값 x
    public static int returnMethod(){ // 반환할 값이 int
        int ret = 100;
        ret *= 100;
        return ret; // 10000
    };

    public static void main(String[] args){

        //[1] 반환 값 o     받는 인자값 x
        // 반환값이 있다는 것은 메서드(함수) 호출에 따른 리턴값이 있는 것이므로 호출시 리턴값을 받는 변수를 정의한다.
        int rst;
        rst = returnMethod(); // 리턴되어질 값을 담을 그릇이 필요하므로 rst 변수 설정

        System.out.println("메서드 호출에 따른 리턴된 값은 = "+ rst); // 10000

    };


    //(4) 반환 값 o     받는 인자값 o
    // 반환값이 있고 받는 인자값이 있는 대문자 출력 메서드를 구현해보시오.
    // 메서드는 ("korea") 입력시 대문자로 출력되도록 구현한다.
    // 이 문제는 자바의 메서드 작성법과 반환값, 인자값에 대한 이해가 있는지를 묻는 문제이다.
    public static String capitalMethod(String str){
        String ret = str.toUpperCase(); // 모두 대문자로 변환해줌

        return ret;
    };

    public static void main(String[] args){
        //[1] 반환 값 o     받는 인자값 o
        // 반환값이 있다는 것은 메서드(함수) 호출에 따는 리턴되는 값이 있다는 것이므로 호출시 리턴값을 받는 변수를 정의한다.

        // 문자열 변수 선언
        String rst;

        rst = capitalMethod("korea");

        System.out.println("입력한 소문자의 대문자는 = "+rst);
    };


    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*
    3. static 선언이 안되어 있는 메서드를 사용하는 방법에 대해서 코드를 구현해보시오.
        이 문제는 메인 메서드에서 static 선언이 없는 메서드를 사용하는 방법에 대해서 아는지를 묻는 문제이다.
        클래스와 객체에 대한 선행 학습이 필요하므로 이에 대한 학습 후 본 문제를 다시 풀어보는 것이 좋다.
        static 으로 설정해 놓으면 '클래스.메서드명();'의 호출이 필요없어진다.
  * */
    public void helloWorld2(){  // static 이 없는 경우
        System.out.println("hello World2222");
    };
    public static void main(String[] args){

        // [1] : 메서드 호출
        // helloWorld2(); -> 메인메서드는 static 메서드만 호출할 수 있기 때문에 에러

        // [2] : 객체 생성 후 메서드 호출
        Method mtd = new Method(); // 전체 클래스인 method 의 권한을 mtd 객체에 부여한다.
        mtd.helloWorld2(); // static 이 없기 때문에 객체를 생성한 후 해당 메서드를 연결해주면 된다.

    };


     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    4. 메서드로 인자 전달시 정수 100을 보냈을 때의 아래 코드의 결과를 말해보시오.
        이 문제는 자바의 기본형 타입과 참조형 타입의 다양한 메서드 호출 방식에 애해서 아는지를 묻는 문제이다.
  * */

        // [!] : Call by value -> 값에 의한 호출(기본형 타입)
        // 메서드로 인자값을 넘길 때 해당 값을 복사하여 바로 넘기는 방식 -> 따라서 sum() 메서드 내부에서는 복사된 값으로 처리를 한다.
        public static void sum(int a){
            a += 400;
            System.out.println(a); // 500
        };

        public static void main(String[] args){

            // [1] : 변수 선언 및 메서드 호출
            int a = 100;
            sum(a);

            // [2] : 출력
            System.out.println(a); // 100
        };


        // [!] : Call by reference -> 참조에 의한 호출(참조형 타입)
        // 메인 메서드에서 100을 보냈을 때 값이 수정되게끔 Call by reference 방식으로 코드를 수정하시오.
        // 이 문제는 앞서 다뤘던 문제의 Call by value 방식을 Call by reference 방식으로 수정해서 보내라는 의미다.
        // a 값이 같은 결과가 나오도록 코드를 수정해보시오.
        // 단, 클래스와 Wrapper, 객체 생성에 대한 개념이 필요하므로 관련 공부를 하고 보는 것이 이해하는데 도움이 된다.

    // [ 1 ]
        public static void sum(Method a){
            System.out.println(a); // @6d06d69c
        };

        public static void main(String[] args){

            // [1] : 변수 선언 및 메서드 호출
            Method a = new Method(); // Method 클래스의 객체를 생성해서 출력하면 해당 객체의 주소값이 출력된다. -> 즉, 참조형 타입은 값을 전달할 때 해당 값이 아닌 값의 주소값이 전달된다.
            sum(a);

            // [2] : 출력
            System.out.println(a); // @6d06d69c
        };

    // [ 2 ]
        public static void sum(int[] b){
            System.out.println(b); // [I@6d06d69c
        };

        public static void main(String[] args){

            // [1] : 변수 선언 및 메서드 호출
            int[] b = new int[5]; // Method 클래스의 객체를 생성해서 출력하면 해당 객체의 주소값이 출력된다. -> 즉, 참조형 타입은 값을 전달할 때 해당 값이 아닌 값의 주소값이 전달된다.
            sum(b);

            // [2] : 출력
            System.out.println(b); // [I@6d06d69c
        };

    // [ 3 ] (중요!)
        // Wapper 클래스의 Integer 클래스 타입으로 변수 a를 선언하고, new로 객체를 생성하여 해당 주소값을 메서드로 보낸다.
        class TestNumber(){ // 하나의 사용자 객체를 생성
            int num;
            TestNumber(int num){ this.num = num;};

        };

        public static void sum(TestNumber d){
            System.out.println(d); // 2.주소값을 여기로 가져와서
            System.out.println(d.num); // 3. num값을 찍어보니 100이 들어있는 것을 확인
            d.num += 400; // 4. d에 400을 더하고
            System.out.println(d); // 5. 500 값을 확인한 후 main으로 다시 이동
        };

        public static void main(String[] args){

            // [1] : 객체 변수 선언
            TestNumber d = new TestNumber(100); // d는 100이 아닌 100 값이 있는 현재 주소값을 가지고 있다.
            sum(d); // 1. 주소값에 의해서 sum이라는 메서드를 호출하고 있다.
            // [2] : 출력
            System.out.println(d.num); // 6. sum 메서드에서 바뀐 값이 main 메서드에 바로 연출됨.
        };


     //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*
    5. 2개의 정수형 값을 리턴하는 메서드를 구현하시오.
        이 문제는 두 개의 리턴 값을 반환하는 메서드 작성법을 아는지에 대해서 묻는 문제이다.
  * */
        public static int[] testMethod(){  // 반환타입과 타입으로 같게 해야 한다.
            int num1 = 100;
            int num2 = 200;
            return new int[] {num1, num2};
        };

        public static void main(String[] args){

            // [1] : 변수 선언 -> 메서드로부터 반환받을 값이 배열이기 때문에.
            int result[] = testMethod();

            // [2] : 출력
            System.out.println(result); // 주소값 출력
            System.out.println(result[0] + "-" + result[1]); // 각각출력
            System.out.println(result[0] + result[1]); // 연산가능 -> 300
            System.out.println(Arrays.toString(result)); // [100, 200]

        };


     //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*
    6. 반환값이 2개 있는 메서드를 구현해보시오.
        메서드는 ("korea","USA") 입력시 소문자는 대문자로 대문자는 소문자로 출력되도록 구현한.
        이 문제는 자바의 메서드 작성시 리턴되는 반환가밧이 2개일 때 처리하는 방법을 아는지에 대해서 묻는 문제이다.
  * */
        public static String[] e(String a, String b) {

            String a_ = a.toUpperCase();
            String b_ = b.toLowerCase();

            // 리턴값 2개를 저장할 배열 변수 선언
            String[] ret = {a_, b_};
            return ret;
        };

        public static void main(String[] args){
            // [1] : 반환값 o , 받는 인자값 o ( ("korea","USA") 입력시 )
            // 반환값이 있다는 것 -> 메서드(호출) 호출에 때른 리턴값이 있다는 것 -> 호출부에서 리턴값을 받는 변수 정의.
            String[] result = e("korea", "USA");

            // [2 ]: 출력
            System.out.println(Arrays.toString(result)); // [KOREA, usa]
            System.out.println(result[0] +"-"+ result[1]); // KOREA - usa
        };


     //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*
    7.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    1.
  * */

}
